////////////////////////////////////////////////////////////////////////
// Class:       LaserMergerTest
// Module Type: analyzer
// File:        LaserMergerTest_module.cc
//
// Generated at Fri Oct 28 13:49:04 2016 by matthias,,, using artmod
// from cetpkgsupport v1_10_01.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "canvas/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "LaserObjects/LaserHits.h"
#include "LaserObjects/LaserBeam.h"

#include "LaserObjects/LaserUtils.h"
#include "TMath.h"
class LaserMergerTest;

class LaserMergerTest : public art::EDAnalyzer {
public:
    explicit LaserMergerTest(fhicl::ParameterSet const &p);
    // The destructor generated by the compiler is fine for classes
    // without bare pointers or other resource use.

    // Plugins should not be copied or assigned.
    LaserMergerTest(LaserMergerTest const &) = delete;

    LaserMergerTest(LaserMergerTest &&) = delete;

    LaserMergerTest &operator=(LaserMergerTest const &) = delete;

    LaserMergerTest &operator=(LaserMergerTest &&) = delete;

    // Required functions.
    void analyze(art::Event const &e) override;

    void reconfigure(fhicl::ParameterSet const &pset) override;

    void beginJob() override;

private:



    std::vector<std::vector<std::vector<float> > > RawDigitDefs; ///< line by line csv container
    std::string fHitModul, fHitLabel;
    std::string fTestConfigFile;
};


LaserMergerTest::LaserMergerTest(fhicl::ParameterSet const &pset)
        :
        EDAnalyzer(pset)  // ,
// More initializers here.
{
    this->reconfigure(pset);
}

void LaserMergerTest::analyze(art::Event const &event) {
    auto id = event.id().event();
    auto DigitTag = art::InputTag(fHitModul, fHitLabel );

    art::ValidHandle <lasercal::LaserBeam> LaserBeam = event.getValidHandle<lasercal::LaserBeam>(DigitTag);

    double precision = 0.0001;

    if (fTestConfigFile.compare("HitDefs-10000.txt") == 0) {
        std::cout << "==> Testing Merging Laser 1 " << id << std::endl;
        assert(LaserBeam->GetLaserID() == 1);
        assert(LaserBeam->GetTime().sec == (int)id);
        assert(LaserBeam->GetTime().usec == (int)id);
        assert(LaserBeam->GetLaserEventID() == (int)id);
        assert(LaserBeam->GetAssID() == (int)id);
        assert(LaserBeam->GetPower() == (float) id / 4.);

        TVector3 Position =  LaserBeam->GetLaserPosition();
        TVector3 Pos(0, 0, 0);
        assert(Position == Pos);

        TVector3 Direction = LaserBeam->GetLaserDirection();

        auto reminder = Direction.X() - TMath::Sin(TMath::DegToRad() * (id - 2.));
        assert(-precision < reminder && reminder < precision);

        reminder = Direction.Z() - TMath::Cos(TMath::DegToRad() * (id - 2.));
        assert(-precision < reminder && reminder < precision);

    }

    if (fTestConfigFile.compare("HitDefs-10001.txt") == 0) {
        std::cout << "==> Testing Merging Laser 2 " << id << std::endl;
        assert(LaserBeam->GetLaserID() == 2);
        assert(LaserBeam->GetTime().sec == id);
        assert(LaserBeam->GetTime().usec == id);
        assert(LaserBeam->GetLaserEventID() == id);
        assert(LaserBeam->GetAssID() == id);
        assert(LaserBeam->GetPower() == (float) id / 4.);

        TVector3 Position =  LaserBeam->GetLaserPosition();
        TVector3 Pos(1., 1., 1.);
        assert(Position == Pos);

        TVector3 Direction = LaserBeam->GetLaserDirection();

        auto reminder = TMath::RadToDeg() * Direction.Theta() - (double) abs(id - 2.) * 10.;
        assert(-precision < reminder && reminder  < precision);

        if (id < 3){
            reminder = TMath::RadToDeg() * Direction.Phi() + 90;
            assert(-precision < reminder && reminder  < precision);
        }
        else if (id >= 3){
            reminder = TMath::RadToDeg() * Direction.Phi() - 90;
            assert(-precision < reminder && reminder  < precision);
        }
    }
    if (fTestConfigFile.compare("HitDefs-10002.txt") == 0) {
        std::cout << "==> Testing Mapping " << id << std::endl;
        // order should be [3, 2, 4, 0, 1]
        assert(LaserBeam->GetTime().sec == id);
        assert(LaserBeam->GetAssID() == LaserBeam->GetLaserEventID());
    }

}

void LaserMergerTest::reconfigure(fhicl::ParameterSet const &pset) {
    fHitModul = pset.get<std::string>("MergerModul");
    fHitLabel = pset.get<std::string>("MergerLabel");
    fTestConfigFile = pset.get<std::string>("TestConfigFile");
}

void LaserMergerTest::beginJob() {
}


DEFINE_ART_MODULE(LaserMergerTest)
