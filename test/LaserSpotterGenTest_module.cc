////////////////////////////////////////////////////////////////////////
// Class:       LaserSpotterGenTest
// Module Type: analyzer
// File:        LaserSpotterGenTest_module.cc
//
// Generated at Fri Sep 30 15:47:38 2016 by matthias,,, using artmod
// from cetpkgsupport v1_10_01.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDProducer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"


class LaserSpotterGenTest;

class LaserSpotterGenTest : public art::EDProducer {
public:
    explicit LaserSpotterGenTest(fhicl::ParameterSet const &p);
    // The destructor generated by the compiler is fine for classes
    // without bare pointers or other resource use.

    // Plugins should not be copied or assigned.
    LaserSpotterGenTest(LaserSpotterGenTest const &) = delete;

    LaserSpotterGenTest(LaserSpotterGenTest &&) = delete;

    LaserSpotterGenTest &operator=(LaserSpotterGenTest const &) = delete;

    LaserSpotterGenTest &operator=(LaserSpotterGenTest &&) = delete;

    // Required functions.
    void produce(art::Event &e) override;

    void reconfigure(fhicl::ParameterSet const &p) override;

private:

    // Declare member data here.
    std::string fTestConfigFile;
};


LaserSpotterGenTest::LaserSpotterGenTest(fhicl::ParameterSet const &p)
// ,
// More initializers here.
{
    this->reconfigure(p);
}

void LaserSpotterGenTest::produce(art::Event &event) {
    auto id = event.id().event();



    if (fTestConfigFile.compare("RawDigits_test.txt") == 0)
    {
        std::cout << "==> Testing Hit Level acceptance" << std::endl;

        std::cout << "ID:" << id << std::endl;
        //assert(id == 0);

    }
}

void LaserSpotterGenTest::reconfigure(fhicl::ParameterSet const &pset) {
    // Implementation of optional member function here.
    fTestConfigFile = pset.get<std::string>("TestConfigFile");
}


DEFINE_ART_MODULE(LaserSpotterGenTest)
