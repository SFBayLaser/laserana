////////////////////////////////////////////////////////////////////////
// Class:       LaserSpotterGenTest
// Module Type: analyzer
// File:        LaserSpotterGenTest_module.cc
//
// Generated at Fri Sep 30 15:47:38 2016 by matthias,,, using artmod
// from cetpkgsupport v1_10_01.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "canvas/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

namespace {
    
#ifndef uint
    using uint = unsigned int;
#endif

}

class LaserSpotterGenTest;

class LaserSpotterGenTest : public art::EDAnalyzer {
public:
    explicit LaserSpotterGenTest(fhicl::ParameterSet const &p);
    // The destructor generated by the compiler is fine for classes
    // without bare pointers or other resource use.

    // Plugins should not be copied or assigned.
    LaserSpotterGenTest(LaserSpotterGenTest const &) = delete;

    LaserSpotterGenTest(LaserSpotterGenTest &&) = delete;

    LaserSpotterGenTest &operator=(LaserSpotterGenTest const &) = delete;

    LaserSpotterGenTest &operator=(LaserSpotterGenTest &&) = delete;

    // Required functions.
    void analyze(art::Event const &e) override;

    void reconfigure(fhicl::ParameterSet const &p) override;

private:

    // Declare member data here.
    std::string fTestConfigFile;
    bool fInverted;
};


LaserSpotterGenTest::LaserSpotterGenTest(fhicl::ParameterSet const &p)
        :
        EDAnalyzer(p)  // ,
// More initializers here.
{
    this->reconfigure(p);
}

void LaserSpotterGenTest::analyze(art::Event const &event) {
    auto id = event.id().event();



    if (fTestConfigFile.compare("RawDigits_HitLevel.txt") == 0)
    {
        std::cout << "==> Testing Hit Level Acceptance" << std::endl;
        // checking if all other events have passed the selection criterion

        // testing logic hell...

        std::vector<uint> good_events = {1,2,3,4,5};
        std::vector<uint> bad_events = {0};

        if (!fInverted) {
            assert( std::find(good_events.begin(), good_events.end(), id) != good_events.end() );
        } else {
            assert( std::find(bad_events.begin(), bad_events.end(), id) != bad_events.end() );
        }
    }
    else if (fTestConfigFile.compare("RawDigits_Threshold.txt") == 0 ){
        std::cout << "==> Testing Number of Hits" << std::endl;

        std::vector<uint> good_events = {2,3};
        std::vector<uint> bad_events = {0,1};

        if (!fInverted) {
            assert( std::find(good_events.begin(), good_events.end(), id) != good_events.end() );
        } else {
            assert( std::find(bad_events.begin(), bad_events.end(), id) != bad_events.end() );
        }
    }
}

void LaserSpotterGenTest::reconfigure(fhicl::ParameterSet const &pset) {
    // Implementation of optional member function here.
    fTestConfigFile = pset.get<std::string>("TestConfigFile");
    fInverted = pset.get<bool>("Inverted", false);
}


DEFINE_ART_MODULE(LaserSpotterGenTest)
