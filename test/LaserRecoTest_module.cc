////////////////////////////////////////////////////////////////////////
// Class:       LaserRecoTest
// Module Type: analyzer
// File:        LaserRecoTest_module.cc
//
// Generated at Fri Oct 28 13:49:04 2016 by matthias,,, using artmod
// from cetpkgsupport v1_10_01.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "LaserObjects/LaserHits.h"

#include "LaserObjects/LaserUtils.h"

class LaserRecoTest;

class LaserRecoTest : public art::EDAnalyzer {
public:
    explicit LaserRecoTest(fhicl::ParameterSet const &p);
    // The destructor generated by the compiler is fine for classes
    // without bare pointers or other resource use.

    // Plugins should not be copied or assigned.
    LaserRecoTest(LaserRecoTest const &) = delete;

    LaserRecoTest(LaserRecoTest &&) = delete;

    LaserRecoTest &operator=(LaserRecoTest const &) = delete;

    LaserRecoTest &operator=(LaserRecoTest &&) = delete;

    // Required functions.
    void analyze(art::Event const &e) override;

    void reconfigure(fhicl::ParameterSet const &pset) override;

    void beginJob() override;

    int CheckHits(art::ValidHandle<std::vector<recob::Hit>> reco_hits, std::vector<std::vector<float>> def_hits);

private:


    std::vector<std::vector<std::vector<float> > > RawDigitDefs; ///< line by line csv container
    std::string fHitModul, fHitLabel;
    std::string fTestConfigFile;
};


LaserRecoTest::LaserRecoTest(fhicl::ParameterSet const &pset)
        :
        EDAnalyzer(pset)  // ,
// More initializers here.
{
    this->reconfigure(pset);
}

void LaserRecoTest::analyze(art::Event const &event) {
    auto id = event.id().event();
    auto DigitTag = art::InputTag(fHitModul, fHitLabel);
    std::stringstream error_string;


    std::cout << "==> Testing Simple Single Track Reco " << id << std::endl;
    try {
        art::ValidHandle<std::vector<recob::Hit>> LaserHits = event.getValidHandle<std::vector<recob::Hit>>(DigitTag);
    }
    catch (...) {
        assert(false && "Event does not contain any hits");
    }
    art::ValidHandle<std::vector<recob::Hit>> LaserHits = event.getValidHandle<std::vector<recob::Hit>>(DigitTag);

    auto hit_def = RawDigitDefs.at(id);
    assert(CheckHits(LaserHits, hit_def) == -1);

    //for (auto const &hit : *LaserHits){
    //    std::cout << hit.PeakTime() << std::endl;
    //}

}

void LaserRecoTest::reconfigure(fhicl::ParameterSet const &pset) {
    fHitModul = pset.get<std::string>("HitModul");
    fHitLabel = pset.get<std::string>("HitLabel");
    fTestConfigFile = pset.get<std::string>("TestConfigFile");
}

void LaserRecoTest::beginJob() {
    RawDigitDefs = lasercal::ReadHitDefs(fTestConfigFile);
}

int LaserRecoTest::CheckHits(art::ValidHandle<std::vector<recob::Hit>> reco_hits,
                             std::vector<std::vector<float> > hit_defs) {
    /*
     *  Checks if a hit vector and a hit definition vector are identical, if true this return -1, otherwise it returns the wire index
     *  in the hit definitions vector where the discrepancy was found.
     */
    for (uint wire = 0; wire < reco_hits->size(); wire++) {
        if ((reco_hits->at(wire).WireID().Wire != hit_defs.at(wire).at(RawDigitDefinition::Wire))) {
            throw std::out_of_range("reco hit wires and hit defs wires are not corresponding");
        }
        if (reco_hits->at(wire).PeakTime() != (int) hit_defs.at(wire).at(RawDigitDefinition::CenterTick)) {
            std::cout << "Hits were of at wire: " << wire << ", times were (reco/def):"
                      << reco_hits->at(wire).PeakTime() << "/" << hit_defs.at(wire).at(RawDigitDefinition::CenterTick);
            return wire;
        }
    }
    return -1;
}

DEFINE_ART_MODULE(LaserRecoTest)
